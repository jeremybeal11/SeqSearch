import timeit
###############################################################3
class Node:
    def __init__(self, init_data):
        self.data = init_data
        self.next = None

    def get_data(self):
        return self.data
    
    def get_next(self):         #this can run but its not collected
                                #by liking each
        return self.next

    def set_data(self, new_data):
        self.data = new_data
        
    def set_next(self,new_next):
        self.data = new_next

########################################################
class unordered:
    def __init__ (self):
        self.head = None
        
    def is_empty(self):
        return self.head == None
    
    def add(self,item):
        temp = Node(item)
        temp.set_next(self.head)
        self.head = temp


    def size(self):
        current = self.head
        count = 0
        while current != None:
            count = count + 1
            current = current.get_next()
        return count


    def search(self, item):
        current = self.head
        found = False
        while current != None and not found:
            if current.get_data() == item:
                found = True
            else:
                current = current.get_next()
                
        return found

    def get_data(self):
        current = self.head
        current.get_data()

t1 = timeit.Timer("unordered()", "from __main__ import unordered")
print("time for unorderedlist to run is: ", t1.timeit(number=1000), "milli")
########################################################################   

def test():
    go = []
    for i in range (10):
        go.append(i)


clock1 = timeit.Timer("test()", "from __main__ import test")
print("for a regular list, the append clocked time is: ")
print( clock1.timeit(number = 1000), "milli")
        

        
